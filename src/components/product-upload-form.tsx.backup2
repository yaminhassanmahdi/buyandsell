"use client";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { apiClient } from "@/lib/api-client";
import type { Product, Category, SubCategory, BusinessSettings, CategoryAttributeType, CategoryAttributeValue } from "@/lib/types";
import { useAuth } from "@/contexts/auth-context";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { useState, useEffect } from "react";
import { Loader2, UploadCloud } from "lucide-react";
import ImageUpload from "@/components/admin/image-upload";
import { useSettings } from "@/contexts/settings-context";
import { generateProductId } from '@/lib/utils';

const VALUE_FOR_NO_SUBCATEGORY_SELECTED = "__NONE__";

const productSchema = z.object({
  name: z.string().min(3, "Product name must be at least 3 characters.").max(100),
  description: z.string().min(10, "Description must be at least 10 characters.").max(1000),
  stock: z.coerce.number().min(0, "Stock quantity cannot be negative.").default(0),
  categoryId: z.string().min(1, "Please select a parent category."),
  subCategoryId: z.string().optional(),
  imageUrls: z.array(z.string()).min(1, "At least one product image is required."),
  dynamicAttributes: z.record(z.string().optional()),
  // New fields
  purchaseDate: z.string().optional(),
  weightKg: z.coerce.number().min(0, "Weight must be a positive number.").optional(),
  purchasePrice: z.coerce.number().min(0, "Purchase price must be a positive number.").optional(),
  expectedSellingPrice: z.coerce.number().min(0, "Expected selling price must be a positive number.").optional(),
  quantityParameter: z.string().default('PC'),
});

type ProductFormData = z.infer<typeof productSchema>;

export function ProductUploadForm() {
  const { currentUser } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);

  const [parentCategories, setParentCategories] = useState<Category[]>([]);
  const [subCategories, setSubCategories] = useState<SubCategory[]>([]);
  const [availableSubCategories, setAvailableSubCategories] = useState<SubCategory[]>([]);
  const [categoryCommissionPercentage, setCategoryCommissionPercentage] = useState<number>(5);

  const [currentAttributeFields, setCurrentAttributeFields] = useState<CategoryAttributeType[]>([]);

  const { settings } = useSettings();
  const activeCurrency = settings?.availableCurrencies?.find(c => c.code === settings?.defaultCurrencyCode) || 
    settings?.availableCurrencies?.[0] || 
    { code: 'BDT', symbol: 'à§³', name: 'Bangladeshi Taka' };

  const form = useForm<ProductFormData>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: "",
      description: "",
      stock: 1,
      categoryId: "",
      subCategoryId: VALUE_FOR_NO_SUBCATEGORY_SELECTED,
      imageUrls: [],
      dynamicAttributes: {},
      purchaseDate: "",
      weightKg: 0,
      purchasePrice: 0,
      expectedSellingPrice: 0,
      quantityParameter: "PC",
    },
  });

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categories = await apiClient.getCategories({ includeSubCategories: true });
        const parentCats = categories.filter((cat: any) => !cat.parent_id);
        const subCats = categories.filter((cat: any) => cat.parent_id);
        
        // Convert to component format and include commission data
        const formattedParentCats = parentCats.map((cat: any) => ({
          id: cat.id,
          name: cat.name,
          commissionPercentage: cat.commissionPercentage || 5,
        }));
        
        const formattedSubCats = subCats.map((cat: any) => ({
          id: cat.id,
          name: cat.name,
          parentCategoryId: cat.parent_id,
        }));
        
        setParentCategories(formattedParentCats);
        setSubCategories(formattedSubCats);
      } catch (error) {
        console.error('Error fetching categories:', error);
        setParentCategories([]);
        setSubCategories([]);
      }
    };

    fetchCategories();
  }, []);

  const watchedCategoryId = form.watch("categoryId");
  const watchedExpectedSellingPrice = form.watch("expectedSellingPrice");

  useEffect(() => {
    if (watchedCategoryId) {
      const filteredSubs = subCategories.filter(sc => sc.parentCategoryId === watchedCategoryId);
      setAvailableSubCategories(filteredSubs);
      const currentSubCategoryId = form.getValues("subCategoryId");
      if (currentSubCategoryId && currentSubCategoryId !== VALUE_FOR_NO_SUBCATEGORY_SELECTED && !filteredSubs.some(sc => sc.id === currentSubCategoryId)) {
        form.setValue("subCategoryId", VALUE_FOR_NO_SUBCATEGORY_SELECTED);
      }

      // Get commission percentage for selected category
      const selectedCategory = parentCategories.find(cat => cat.id === watchedCategoryId);
      if (selectedCategory && selectedCategory.commissionPercentage) {
        setCategoryCommissionPercentage(selectedCategory.commissionPercentage);
      } else {
        setCategoryCommissionPercentage(5); // Default 5%
      }
    } else {
      setAvailableSubCategories([]);
      form.setValue("subCategoryId", VALUE_FOR_NO_SUBCATEGORY_SELECTED);
      setCategoryCommissionPercentage(5);
    }
  }, [watchedCategoryId, subCategories, parentCategories, form]);

  // Calculate commission and earnings
  const expectedSellingPrice = Number(watchedExpectedSellingPrice) || 0;
  const commissionAmount = expectedSellingPrice * (categoryCommissionPercentage / 100);
  const userEarnings = expectedSellingPrice - commissionAmount;

  async function onSubmit(values: ProductFormData) {
    if (!currentUser) {
      toast({ title: "Error", description: "You must be logged in to sell a product.", variant: "destructive" });
      return;
    }
    setIsLoading(true);

    try {
      const selectedAttrs: Array<{ attributeTypeId: string; attributeValueId: string; }> = [];
      if (values.dynamicAttributes) {
          for (const typeId in values.dynamicAttributes) {
              const valueId = values.dynamicAttributes[typeId];
              if (valueId && valueId !== "") {
                  selectedAttrs.push({ attributeTypeId: typeId, attributeValueId: valueId });
              }
          }
      }

      // Generate unique product ID
      const productId = generateProductId();

      const productData = {
        id: productId,
        name: values.name,
        description: values.description,
        price: values.expectedSellingPrice, // Use expected selling price as the main price
        stock: values.stock,
        imageUrl: values.imageUrls[0] || `https://placehold.co/600x400.png`,
        imageHint: `${values.name.substring(0,15)} product`,
        categoryId: values.categoryId,
        subCategoryId: values.subCategoryId === VALUE_FOR_NO_SUBCATEGORY_SELECTED ? null : values.subCategoryId,
        selectedAttributes: selectedAttrs,
        sellerId: currentUser.id,
        sellerName: currentUser.name,
        status: 'pending',
        purchaseDate: values.purchaseDate,
        weightKg: values.weightKg,
        purchasePrice: values.purchasePrice,
        expectedSellingPrice: values.expectedSellingPrice,
        quantityParameter: values.quantityParameter,
        commissionPercentage: categoryCommissionPercentage,
      };

      const result = await apiClient.createProduct(productData);

      toast({
        title: "Product Submitted!",
        description: `${values.name} has been submitted for approval.`,
      });
      
      form.reset();
      setAvailableSubCategories([]);
      setCurrentAttributeFields([]);
    } catch (error) {
      console.error('Product creation error:', error);
      toast({
        title: "Error",
        description: "Failed to submit product. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Product Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Vintage Leather Jacket" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea placeholder="Describe your product in detail..." rows={5} {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-6">
        <FormField
            control={form.control}
            name="stock"
            render={({ field }) => (
                <FormItem>
                <FormLabel>Stock Quantity</FormLabel>
                <FormControl>
                    <Input type="number" placeholder="e.g., 10" {...field} />
                </FormControl>
                <FormMessage />
                </FormItem>
            )}
            />
        <FormField
          control={form.control}
          name="weightKg"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Weight (KG)</FormLabel>
              <FormControl>
                <Input type="number" step="0.001" placeholder="0.5" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        </div>

        <div className="grid grid-cols-2 gap-6">
        <FormField
          control={form.control}
          name="purchaseDate"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Purchase Date</FormLabel>
              <FormControl>
                <Input type="date" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="quantityParameter"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Quantity Parameter</FormLabel>
              <Select onValueChange={field.onChange} value={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select quantity parameter" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="PC">PC (Piece)</SelectItem>
                  <SelectItem value="KG">KG (Kilogram)</SelectItem>
                  <SelectItem value="Pound">Pound</SelectItem>
                  <SelectItem value="Ounce">Ounce</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        </div>

        <div className="grid grid-cols-2 gap-6">
        <FormField
          control={form.control}
          name="purchasePrice"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Purchase Price ({activeCurrency.code})</FormLabel>
              <FormControl>
                <Input type="number" step="0.01" placeholder="25.00" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="expectedSellingPrice"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Expected Selling Price ({activeCurrency.code})</FormLabel>
              <FormControl>
                <Input type="number" step="0.01" placeholder="35.00" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        </div>

        {/* Commission Calculation Display */}
        {expectedSellingPrice > 0 && watchedCategoryId && (
          <div className="p-4 border rounded-lg bg-muted/50">
            <h3 className="font-semibold mb-2">Commission Calculation</h3>
            <div className="space-y-1 text-sm">
              <div className="flex justify-between">
                <span>Expected Selling Price:</span>
                <span>{activeCurrency.symbol}{expectedSellingPrice.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Platform Commission ({categoryCommissionPercentage}%):</span>
                <span>{activeCurrency.symbol}{commissionAmount.toFixed(2)}</span>
              </div>
              <div className="flex justify-between font-semibold text-green-600">
                <span>You will receive:</span>
                <span>{activeCurrency.symbol}{userEarnings.toFixed(2)}</span>
              </div>
            </div>
          </div>
        )}

        <FormField
          control={form.control}
          name="categoryId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Parent Category</FormLabel>
              <Select onValueChange={field.onChange} value={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a parent category" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {parentCategories.map(cat => (
                    <SelectItem key={cat.id} value={cat.id}>{cat.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="subCategoryId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Sub-Category (Optional)</FormLabel>
              <Select
                onValueChange={(value) => field.onChange(value === VALUE_FOR_NO_SUBCATEGORY_SELECTED ? VALUE_FOR_NO_SUBCATEGORY_SELECTED : value)}
                value={field.value || VALUE_FOR_NO_SUBCATEGORY_SELECTED}
                disabled={!watchedCategoryId || availableSubCategories.length === 0}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder={!watchedCategoryId ? "Select parent category first" : "Select a sub-category (optional)"} />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value={VALUE_FOR_NO_SUBCATEGORY_SELECTED}>-- No Sub-Category --</SelectItem>
                  {availableSubCategories.map(subCat => (
                    <SelectItem key={subCat.id} value={subCat.id}>{subCat.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="imageUrls"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Product Images</FormLabel>
              <FormControl>
                <ImageUpload
                  value={field.value || []}
                  onChange={(urls) => field.onChange(urls)}
                  maxFiles={5}
                  maxSize={5}
                />
              </FormControl>
              <FormDescription>
                Upload up to 5 high-quality images of your product. The first image will be used as the main display image.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit" className="w-full" size="lg" disabled={isLoading}>
          {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          {isLoading ? "Submitting..." : "Submit Product for Approval"}
        </Button>
      </form>
    </Form>
  );
}
